#!/usr/bin/env luajit
local template = [[
        \        ___--===--___
         \    __=     ___   - \
            _/     o           |
         /==   \     __-- o    |
        |   o   -            _/
         \__    \    -   o //
          -===============-       - dan quayle
]]



function terminal_size()
    local width
    local handle1 = io.popen("tput cols")
    if handle1 and handle2 then
        width = handle1:read("*n")
        handle1:close()
    end
    return width or 100
end

function wrap_text(text, width)
    local result = {}
    local line = ""
    for word in text:gmatch("%S+") do
        if #line + #word + 1 > width then
            table.insert(result, line)
            line = word
        else
            line = line .. (line == "" and "" or " ") .. word
        end
    end
    if #line > 0 then
        table.insert(result, line)
    end
    return result
end

function show(quote, width)
    local wraps = wrap_text(quote, width)
    local maxwidth = 0
    for _, line in ipairs(wraps) do
        if #line > maxwidth then
            maxwidth = #line
        end
    end
    local out = {}
    io.write(" " .. string.rep("_", maxwidth + 2) .. "\n")
    for idx, line in ipairs(wraps) do
        if idx == 1 then
            io.write((#wraps == 1 and "< " or "/ "))
        elseif idx == #wraps then
            io.write("\\ ")
        else
            io.write("| ")
        end
        io.write(string.format("%-" .. maxwidth .. "s", line))
        if idx == 1 then
            io.write((#wraps == 1 and " >" or " \\"))
        elseif idx == #wraps then
            io.write(" /")
        else
            io.write(" |")
        end
        io.write("\n")
    end
    io.write(" " .. string.rep("-", maxwidth + 2) .. "\n")
    io.write(template)
    io.flush()
end

function loadFile(path, quoteL)
    local file = io.open(path, "r")
    if file then
        for line in file:lines() do
            if #line > 4 and not line:match("^#") then
                table.insert(quoteL, line)
            end
        end
        file:close()
    end
end

function main(args)
    local text, width, h, help
    local options = {}
    for i = 1, #args do
        if args[i]:match("^%-") then
            options[args[i]] = true
        end
    end
    io.stdout:setvbuf('full', 1024)
    text = options["--text"] or options["-t"]
    width = tonumber(args[#args])
    h = options["--help"] or options["-h"]
    if h or help then
        print([[
usage of potatoe:
  --text -t
        print quote text only
  --width -w int
        specify width for text wrapping]])
        return 0
    end
    local quoteL = {}
    for _, fileName in ipairs({
        "./quotes.txt",
        "/usr/lib/potatoe/quotes.txt",
        "/var/lib/potatoe/quotes.txt",
    }) do
        loadFile(fileName, quoteL)
    end
    if #quoteL == 0 then
        table.insert(quoteL, "no quotes")
    end
    local selected = quoteL[math.random(#quoteL)]
    if text then
        print(selected)
        return 0
    end
    local defaultFill
    if width then
        defaultFill = width
    else
        local w, h = terminal_size()
        defaultFill = math.floor(0.64 * w)
    end
    show(selected, defaultFill)
    return 0
end

math.randomseed(os.clock())
os.exit(main(arg))
